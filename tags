!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
CXX	./Makefile	/^CXX=g++$/;"	m
CXXFLAGS	./Makefile	/^CXXFLAGS=-g$/;"	m
NETWORK_H	./network.h	2;"	d
Network	./network.cpp	/^Network::Network(int *architecture, int depth, double (**f_activations)(double),$/;"	f	class:Network
Network	./network.h	/^class Network$/;"	c
OFILES	./Makefile	/^OFILES=network.o$/;"	m
TARGET	./Makefile	/^TARGET=driver$/;"	m
activations	./network.h	/^    double *activations;$/;"	m	class:Network
architecture	./network.h	/^    int *architecture;$/;"	m	class:Network
back_prop	./network.cpp	/^double Network::back_prop(double *input, double *output, double training_rate)$/;"	f	class:Network
d_f_activations	./network.h	/^    double (**d_f_activations)(double);$/;"	m	class:Network
d_f_cost	./network.h	/^    double (*d_f_cost)(double, double);$/;"	m	class:Network
d_relu	./utils.h	/^double d_relu(double x) {$/;"	f
d_sigmoid	./utils.h	/^double d_sigmoid(double x) {$/;"	f
d_squared_error	./utils.h	/^double d_squared_error(double y_hat, double y) {$/;"	f
deltas	./network.h	/^    double *deltas;$/;"	m	class:Network
depth	./network.h	/^    int depth;$/;"	m	class:Network
f_activations	./network.h	/^    double (**f_activations)(double);$/;"	m	class:Network
f_cost	./network.h	/^    double (*f_cost)(double, double);$/;"	m	class:Network
layers	./network.h	/^    double **layers;$/;"	m	class:Network
main	./driver.cpp	/^int main() {$/;"	f
neuron_inputs	./network.h	/^    double *neuron_inputs;$/;"	m	class:Network
neuron_layers	./network.h	/^    int *neuron_layers;$/;"	m	class:Network
num_neurons	./network.h	/^    int num_neurons;$/;"	m	class:Network
num_weights	./network.h	/^    int num_weights;$/;"	m	class:Network
prop	./network.cpp	/^double *Network::prop(double *input)$/;"	f	class:Network
read_biases	./network.h	/^    double *read_biases;$/;"	m	class:Network
read_data	./network.h	/^    double *read_data;$/;"	m	class:Network
read_weights	./network.h	/^    double *read_weights;$/;"	m	class:Network
relu	./utils.h	/^double relu(double x) {$/;"	f
sigmoid	./utils.h	/^double sigmoid(double x) {$/;"	f
squared_error	./utils.h	/^double squared_error(double y_hat, double y) {$/;"	f
train	./network.cpp	/^void Network::train(double training_rate, int epochs, int batch_size, double **inputs, double **outputs, int n_inputs)$/;"	f	class:Network
update	./network.cpp	/^void Network::update()$/;"	f	class:Network
weight_layers	./network.h	/^    int *weight_layers;$/;"	m	class:Network
write_biases	./network.h	/^    double *write_biases;$/;"	m	class:Network
write_data	./network.h	/^    double *write_data;$/;"	m	class:Network
write_weights	./network.h	/^    double *write_weights;$/;"	m	class:Network
~Network	./network.cpp	/^Network::~Network()$/;"	f	class:Network
